package com.kohmiho.mpsr;

import java.io.File;
import java.math.BigDecimal;

import com.kohmiho.vaadin.component.FileUploader;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.util.filter.Compare;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.server.FileResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.BrowserFrame;
import com.vaadin.ui.Button;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;

@SuppressWarnings("serial")
public class Form_A extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private BrowserFrame browser;
	@AutoGenerated
	private TextArea description;
	@AutoGenerated
	private Upload uploadFile;
	@AutoGenerated
	private TextField fileName;
	@AutoGenerated
	private TextField title;
	@AutoGenerated
	private TextField number;
	@AutoGenerated
	private Button removeButton;
	@AutoGenerated
	private Button addButton;
	@AutoGenerated
	private Table table;
	@AutoGenerated
	private Label labelPrototype;
	String caption;
	Table mpsrTable;
	SQLContainer sqlContainer;
	AbstractComponent[] components;
	FieldGroup fieldGroup = new FieldGroup();

	private static final Object[] VISIBLE_COLUMNS = { "NUM", "TITLE", "FILE_NAME" };
	private static final String[] COLUMN_HEADERS = { "Number", "Title", "File" };
	private static final int[] COLUMN_WIDTH = { 50, 300, 300 };

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public Form_A(String caption, SQLContainer container, Table mpsrTable) {
		this.caption = caption;
		this.sqlContainer = container;
		this.mpsrTable = mpsrTable;

		buildMainLayout();
		setCompositionRoot(mainLayout);

		initFields();
		addListener();
	}

	public void saveTable() {
		table.commit();
		table.refreshRowCache();
	}

	public void unSelectTable() {
		table.select(null);
	}

	public void setFieldsVisible(boolean visible) {
		for (AbstractComponent component : components) {
			component.setVisible(visible);
		}
	}

	private void initFields() {

		// mainLayout.addStyleName("form-Appendix");

		labelPrototype.setValue("Prototype");

		components = new AbstractComponent[] { number, title, uploadFile, description };

		browser.setEnabled(true);
		browser.setVisible(false);

		FileUploader uploader = new FileUploader(mpsrTable, fileName, browser);
		uploadFile.setReceiver(uploader);
		uploadFile.addSucceededListener(uploader);

		TextField[] textFields = { number, title, fileName };
		String[] propertyIds = { "NUM", "TITLE", "FILE_NAME" };
		for (int i = 0; i < textFields.length; i++) {
			textFields[i].setNullRepresentation("");
			fieldGroup.bind(textFields[i], propertyIds[i]);
		}

		description.setNullRepresentation("");
		fieldGroup.bind(description, "DESC_1");

		fieldGroup.setBuffered(false);

		table.setImmediate(true);
		table.setSelectable(true);
		table.setColumnReorderingAllowed(true);
		table.setCaption(caption);
		table.setContainerDataSource(sqlContainer);
		table.setColumnHeaderMode(ColumnHeaderMode.EXPLICIT);
		table.setVisibleColumns(VISIBLE_COLUMNS);
		table.setColumnHeaders(COLUMN_HEADERS);
		for (int i = 0; i < VISIBLE_COLUMNS.length; i++) {
			table.setColumnWidth(VISIBLE_COLUMNS[i], COLUMN_WIDTH[i]);
		}

		setFieldsVisible(null != table.getValue());
	}

	private void addListener() {
		addButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {

				Object id = sqlContainer.addItem();

				sqlContainer.removeAllContainerFilters();

				// table.getContainerProperty(id, "MPSR_ID").setValue(new
				// BigDecimal(Integer.parseInt(mpsrTable.getValue().toString())));
				table.getContainerProperty(id, "MPSR_ID").setValue(Integer.parseInt(mpsrTable.getValue().toString()));
				table.getContainerProperty(id, "NUM").setValue("New");

				Compare.Equal filter = new Compare.Equal("MPSR_ID", mpsrTable.getValue().toString());
				sqlContainer.addContainerFilter(filter);

				table.refreshRowCache();
				table.select(id);

			}
		});

		removeButton.addClickListener(new ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				Object id = table.getValue();
				sqlContainer.removeItem(id);
			}
		});

		table.addValueChangeListener(new ValueChangeListener() {
			@Override
			public void valueChange(ValueChangeEvent event) {

				table.refreshRowCache();

				fieldGroup.setItemDataSource(sqlContainer.getItem(table.getValue()));

				setFieldsVisible(null != table.getValue());

				if (null != table.getValue() && null != fileName.getValue()) {
					File sourceFile = new File(MPSRUI.getFilePath(mpsrTable.getValue().toString(), fileName.getValue()));
					if (sourceFile.exists()) {
						browser.setSource(new FileResource(sourceFile));
						browser.setVisible(true);
					} else {
						browser.setVisible(false);
					}
				} else {
					browser.setVisible(false);
				}
			}

		});
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("720px");
		mainLayout.setHeight("710px");

		// top-level component properties
		setWidth("720px");
		setHeight("710px");

		// labelPrototype
		labelPrototype = new Label();
		labelPrototype.setStyleName("prototype2");
		labelPrototype.setImmediate(false);
		labelPrototype.setWidth("-1px");
		labelPrototype.setHeight("-1px");
		labelPrototype.setValue("Label");
		mainLayout.addComponent(labelPrototype, "top:0.0px;right:0.0px;");

		// table
		table = new Table();
		table.setImmediate(true);
		table.setWidth("695px");
		table.setHeight("120px");
		mainLayout.addComponent(table, "top:20.0px;left:20.0px;");

		// addButton
		addButton = new Button();
		addButton.setCaption("New");
		addButton.setImmediate(true);
		addButton.setWidth("-1px");
		addButton.setHeight("-1px");
		mainLayout.addComponent(addButton, "top:150.0px;left:20.0px;");

		// removeButton
		removeButton = new Button();
		removeButton.setCaption("Remove");
		removeButton.setImmediate(true);
		removeButton.setWidth("-1px");
		removeButton.setHeight("-1px");
		mainLayout.addComponent(removeButton, "top:150.0px;left:100.0px;");

		// number
		number = new TextField();
		number.setCaption("Number");
		number.setImmediate(true);
		number.setWidth("100px");
		number.setHeight("-1px");
		mainLayout.addComponent(number, "top:200.0px;left:20.0px;");

		// title
		title = new TextField();
		title.setCaption("Title");
		title.setImmediate(true);
		title.setWidth("570px");
		title.setHeight("-1px");
		mainLayout.addComponent(title, "top:200.0px;left:140.0px;");

		// fileName
		fileName = new TextField();
		fileName.setCaption("File Name");
		fileName.setEnabled(false);
		fileName.setImmediate(true);
		fileName.setVisible(false);
		fileName.setWidth("-1px");
		fileName.setHeight("-1px");
		mainLayout.addComponent(fileName, "top:300.0px;left:200.0px;");

		// uploadFile
		uploadFile = new Upload();
		uploadFile.setCaption("Upload PDF file here");
		uploadFile.setImmediate(false);
		uploadFile.setWidth("280px");
		uploadFile.setHeight("-1px");
		mainLayout.addComponent(uploadFile, "top:310.0px;left:20.0px;");

		// description
		description = new TextArea();
		description.setCaption("Description");
		description.setImmediate(true);
		description.setWidth("400px");
		description.setHeight("100px");
		mainLayout.addComponent(description, "top:240.0px;left:300.0px;");

		// browser
		browser = new BrowserFrame();
		browser.setEnabled(false);
		browser.setImmediate(false);
		browser.setVisible(false);
		browser.setWidth("700px");
		browser.setHeight("350px");
		mainLayout.addComponent(browser, "top:360.0px;left:20.0px;");

		return mainLayout;
	}
}
